== Module integration

_J1 Bootsnav_ is prepared to get fully integrated within the template system.
To ensure seamless integration, some changes are applied to the CSS and JS
components of *original* library. _J1 Theme_ is using a _Liquid_ based
version  of _Bootsnav_ to make the library work best with _Jekyll_. Therefore,
the following documentation is about _J1 Bootsnav_, the *modified* version of
_Bootsnav_ for _Jekyll_.

Typically, the following *components* and *actions* are part of a J1 Module
_integration_:

. Placing the Module resources that are to be _loaded_ with a page
. Resources configuration to _integrate_ the module with the _template core_
. Module configuration for _individual use_ of the module

////
== Template Integration

As mentioned earlier, the _Backstretch_ jQuery plugin is used for
image and video processing. Backstretch is fully integrated into the J1 Layout
System and loaded automatically for every layout in which a header is
configured.

At the time a page is being build by Jekyll, the following three steps are
performed by the layout system loaders:

. Placing CSS and JS resources needed for the header component into the
`<head>` section
. Putting the generic (static) HTML code portion for a header into the
`<body>` section
. Generating an HTML `<script>` element at the end of the `<body>` section,
which runs the dynamic processing for the header on page-ready event.

=== Header Resources

All resources used by J1 Theme get configured in the YAML data file
`_data/resources/j1_resources.yml`. They're to be registered by a unique
(resource) *ID*.
The header component is using 3 resources:

* A CSS file: `backstretch.css`
* A Javascript library: `jquery.backstretch.js`
* The J1 (Javascript) adapter: `j1_adapter_master_header.js`

All these resources are being processed (for all layouts) at the time a
page is loaded by the browser. The resources for the header component are
registered by the ID `master_header` and are configured as follows:

.J1 Header Resources
[source, yaml]
----
 # -----------------------------------------------------------------------
 # Master Header (Backstretch)
  - resource:
      enabled:                      true
      id:                           master_header
      comment:                      Resources for J1 Master Header
      layout:                       [ all ]
      region:                       head
      required:                     always
      script_load:                  sync
      data:
        css:                        []

        files:                      [
                                      css/backstretch.css,
                                      js/jquery.backstretch.js,
                                      js/j1_adapter_master_header.js
                                    ]

        js:                         []

        init_function:              j1MasterHeader.init
----

[NOTE]
====
A resource *ID* is used to identify a resource at *build* and at
*run* time. Many of the building blocks of J1 Theme – like components or
modules – are *dynamic* using Javascript. Besides the fact that the web is
static, dynamic elements of J1 Theme can *react* on *dynamic* parameters
sent to a J1 Adapter at build *and* run time.
====

=== Header Initialization

The J1 Header Adapter is responsible for the initialization of a header. As
every adapter in J1 Theme, the J1 Header Adapter provides an
initialization function (property) `init` fired on the *page-ready* event.

The adapter provides all the magic to *setup* and to *initialize* a header.
No programming is needed – all code gets generated automatically based on the
configuration parameters set for a header.
////

=== Module resources

The Module resources (module data files) of _J1 Bootsnav_ are stored under the
*asset path* of _J1 Theme_: `/assets/themes/j1/bs&#x5F;bootsnav`:

.Structure of the _J1 Bootsnav_ asset tree
----
├── css
│   ├── bootsnav.css
│   ├── bootsnav.min.css
│   ├── skins
│   │   └── j1_template.css
│   ├── style.css
│   └── style.min.css
│
├── images
│   ├── brand
│   │   ├── logo-black.jpg
│   │   └── logo-white.jpg
│   │
│   └── thumb
│       ├── thumb01.jpg
│       ├── thumb02.jpg
│       └── thumb03.jpg
│
├── js
│   ├── bootsnav.js
│   └── new_version
│       ├── bootsnav.js
│       ├── bootsnav.min.js
│       └── bootsnav.plugin.js
│
├── LICENSE.md
└── README.md
----

==== J1 Theme Adapter

An _J1 Adapter_ is the *interface* between the template _core system_ and the
_module_ to integrate. The template system is using 2 different types of
_Template Adapters_:

* HTML Adapter (for *sychronous* loads)
* JS Adapter (for *asychronous* loads)

An *HTML* adapter interface with the _Layout System_ of _Jekyll_ to *generate*
all the static *HTML Markup* (code) at the *time* the page is being *generated*.
From the browsers prospective, all HTML code generated by the _HTML Adapter_
is loaded *sychronously* while the the page is being loaded (from the web
server).

_JS Adapter_ behaves different. The static HTML data, e.g. for a image gallery
or a carousel, are generated at build time as *data files*. All modules using
_JS Adapters_ are loading the (static) HTML code *asychrounously* using AJAX
loads.

[NOTE]
====
_AJAX_ - *Asynchronous JavaScript and XML* - is the art of exchanging data
with a (web) server for updating *parts* of a web page without *reloading*
the whole page. In short: _AJAX_ is about *loading data* in the *background*
and display it on the webpage; no need to reload a whole page.
====

All _JS Adapters_ use the _jQuery Framework_ for *asynchronous* loads.
The _jQuery_ frame work  provides several methods for _AJAX_ functionality.
With the _jQuery_ _AJAX_ methods, data like text, HTML, XML, or JSON can be
requested from a remote server using both *HTTP Get* and *HTTP Post* methods.
External data can be loaded directly into selected HTML elements (typically
<DIV> elements) of a webpage.

This functionality is perfectly made for static webs, a good reason to use
_JS Adapters_ to integrate a Javascript library using AJAX. _JS Adapters_
generate (static) data as *files* at build time used later (asynchronous)
to place this data into (previously placed) <DIV> elements.

[NOTE]
====
Not *every* _J1 Module_ can be integrated via _JS Adapters_. Modules like
the navigation system are integrated for *sychronous* load to make the
*functionality available* from the time the page is being loaded (from the web
server). On the other hand, image galleries od sliders are typical candidates
for *asynchronous* loads because those functionality is *not* needed from
the time the page is loaded; the availability can be defered up to the time
the page has been loaded.
====

For _J1 Bootsnav_, the module is integrated using an _HTML Adapter_, a set
of _Liquid_ template procedures that comes with the installation of the module.
These templates get stored within the *core template* path:

`~/&#x5F;includes/themes/j1/modules/adapter/bootsnav`

The file `bootsnav.html` is the _HTML Template Adapter_ of the module
_J1 Bootsnav_ using several *procedures* to create the HTML code for the
navigation bar, the quicklinks and so on :

.J1 (HTML) Adapter of _J1 Bootsnav_
----
  ├──── procedures
  │     ├──  navbar.proc
  │     ├──  quicklinks.proc
  │     ├──  sidebar.proc
  │     └─── topsearch.proc
  │
  └─── bootsnav.html
----

[NOTE]
====
Refer to Core Templates: j1_core_templates#html-adapter (link removed!) for more
information about _Liquid templates_ and _J1 Theme Adapters_ used for the
template system.
====

=== Resource configuration

Each _J1 Module_ has to be *registered* as a `resource`. A `ressource` (record)
describes what files are to be loaded, how they loaded and what Javascript
function get the module initialized to make it available for after a page has
been loaded. The *central* configuration file for all resources *registered*
`j1_resources.yml` is located in the _resource configuration tree_:

.Structure of the resource configuration tree
----
├── _data
│   ├── ...
│   │
│   ├── resources
│   │   │
│   │   └─── default
│   │       ├──  ..
│   │       ├──  j1_nav-0.0.1
│   │       ..
│   │       └─── j1_toc-0.0.1
│   │
│   └── j1_resources.yml
│   ...
----

[NOTE]
====
Refer to J1 Core Datafiles-j1_core_templates#html-adapter (link-removed) for
more information about what _Resources_ are and how them used with the template
system.
====

_J1_Bootsnav_ is registered as `j1&#x5F;bootsnav` for all content pages
using a `layout` of type `home`, `page` and `post`. The NAV module is used
typically on each and every page of the website; therefore, the resources are
`required` of type `always`. To have the _J1 Bootsnav_ functionality available
at the time the page is being loaded the `script&#x5F;load` is done `sync`
(synchronous load).

The base resource files for CSS and Javascript are available `minified` and
`un-minified` and loaded as `data|css` and `data|js` resources. The _J1 Theme_
`JS adapter` and the CSS skin file for _J1 Bootsnav_ are loaded as `data|file`
resources, because *no* minified versions are available.

The `initializer` for the dynamic components (Javascript) of _J1 Bootsnav_ has
been moved to the `JS Adapter` of _J1 Theme_. The `initializer` (J1BsBootsnav)
registers an `init&#x5F;function` by the method name `init` which will be called
by __jQuery__ on `document-ready` event automatically.

.Resource configuration for _J1 Bootsnav_
//include::../000_shared/100_resource_config_bootsnav.asciidoc[]

IMPORTANT: Do *not* add any initializing for modules that have an `init&#x5F;function`
registered with a resource. All `initializers` registered are *automatically*
placed (by the `MODULE Runner` component of _J1 Theme_) as an HTML `<script>`
element and processed via __jQuery__ on `document-ready` event.
